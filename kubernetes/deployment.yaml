apiVersion: v1
kind: Namespace
metadata:
  name: live-chatroom

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: live-chatroom
data:
  NODE_ENV: "production"
  PORT: "12000"

---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: live-chatroom
type: Opaque
stringData:
  JWT_SECRET: "your-jwt-secret-here"
  DB_URI: "mongodb+srv://username:password@cluster.mongodb.net/livechatroom"
  AGORA_APP_ID: "your-agora-app-id"
  AGORA_APP_CERTIFICATE: "your-agora-certificate"
  CLOUDINARY_CLOUD_NAME: "your-cloud-name"
  CLOUDINARY_API_KEY: "your-api-key"
  CLOUDINARY_API_SECRET: "your-api-secret"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: live-chatroom-backend
  namespace: live-chatroom
  labels:
    app: live-chatroom
    component: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: live-chatroom
      component: backend
  template:
    metadata:
      labels:
        app: live-chatroom
        component: backend
    spec:
      containers:
      - name: backend
        image: your-docker-username/live-chatroom:latest
        ports:
        - containerPort: 12000
          name: http
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 12000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 12000
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: live-chatroom-service
  namespace: live-chatroom
spec:
  type: LoadBalancer
  selector:
    app: live-chatroom
    component: backend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 12000

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: live-chatroom-ingress
  namespace: live-chatroom
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/websocket-services: live-chatroom-service
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
spec:
  tls:
  - hosts:
    - your-domain.com
    secretName: live-chatroom-tls
  rules:
  - host: your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: live-chatroom-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: live-chatroom-hpa
  namespace: live-chatroom
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: live-chatroom-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: live-chatroom
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: live-chatroom
spec:
  serviceName: mongodb-service
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:6.0
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "admin"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: MONGODB_PASSWORD
  volumeClaimTemplates:
  - metadata:
      name: mongodb-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: live-chatroom
spec:
  clusterIP: None
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017